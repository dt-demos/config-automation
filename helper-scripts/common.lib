################################################################
# This is shared library
################################################################
execute_action()
{
    DT_TENANT_HOSTNAME=$1
    DT_API_TOKEN=$2
    CONFIG_NAME=$3
    CONFIG_DIR=$4
    CONFIG_API_NAME=$5
    CONFIG_LABEL=$6
    case $ACTION in
        get)
        ./helper-scripts/getConfig.sh $DT_TENANT_HOSTNAME $DT_API_TOKEN "$CONFIG_NAME" $CONFIG_API_NAME "$CONFIG_LABEL"
        ;;
        add)
        ./helper-scripts/addConfig.sh $DT_TENANT_HOSTNAME $DT_API_TOKEN "$CONFIG_NAME" $CONFIG_FILE $CONFIG_API_NAME "$CONFIG_LABEL"
        ;;
        delete)
        ./helper-scripts/deleteConfig.sh $DT_TENANT_HOSTNAME $DT_API_TOKEN "$CONFIG_NAME" $CONFIG_API_NAME "$CONFIG_LABEL"
        ;;
        save)
        rm -rf "$CONFIG_DIR"
        mkdir "$CONFIG_DIR"
        ./helper-scripts/saveConfig.sh $DT_TENANT_HOSTNAME $DT_API_TOKEN "$CONFIG_NAME" $CONFIG_DIR $CONFIG_API_NAME "$CONFIG_LABEL"
        ;;
    esac
}

validate_config_file()
{
	if ! [ -f "$1" ]; then
		echo "ABORTING: missing $1 configuration yaml file"
		exit 1
	fi
}

validate_creds_file()
{
	if ! [ -f "$CREDS_FILE" ]; then
		echo "ABORTING: missing $CREDS_FILE credential json file"
		exit 1
	fi

	DT_TENANT_HOSTNAME=$(cat $CREDS_FILE | jq -r '.dynatraceHostName')
	DT_API_TOKEN=$(cat $CREDS_FILE | jq -r '.dynatraceApiToken')

	if [ "$DT_TENANT_HOSTNAME" == null ]; then
		echo "ABORTING: missing DT_TENANT_HOSTNAME in creds.json file"
		exit 1
	fi
	if [ "$DT_API_TOKEN" == null ]; then
		echo "ABORTING: missing DT_API_TOKEN in creds.json file"
		exit 1
	fi
}

# YAML processsing Credit to https://github.com/jasperes/bash-yaml
parse_yaml() {
    local yaml_file=$1
    local prefix=$2
    local s
    local w
    local fs

    s='[[:space:]]*'
    w='[a-zA-Z0-9_.-]*'
    fs="$(echo @|tr @ '\034')"

    (
        sed -e '/- [^\â€œ]'"[^\']"'.*: /s|\([ ]*\)- \([[:space:]]*\)|\1-\'$'\n''  \1\2|g' |

        sed -ne '/^--/s|--||g; s|\"|\\\"|g; s/[[:space:]]*$//g;' \
            -e "/#.*[\"\']/!s| #.*||g; /^#/s|#.*||g;" \
            -e "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
            -e "s|^\($s\)\($w\)${s}[:-]$s\(.*\)$s\$|\1$fs\2$fs\3|p" |

        awk -F"$fs" '{
            indent = length($1)/2;
            if (length($2) == 0) { conj[indent]="+";} else {conj[indent]="";}
            vname[indent] = $2;
            for (i in vname) {if (i > indent) {delete vname[i]}}
                if (length($3) > 0) {
                    vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
                    printf("%s%s%s%s=(\"%s\")\n", "'"$prefix"'",vn, $2, conj[indent-1],$3);
                }
            }' |

        sed -e 's/_=/+=/g' |

        awk 'BEGIN {
                FS="=";
                OFS="="
            }
            /(-|\.).*=/ {
                gsub("-|\\.", "_", $1)
            }
            { print }'
    ) < "$yaml_file"
}

create_variables() {
    local yaml_file="$1"
    local prefix="$2"
    eval "$(parse_yaml "$yaml_file" "$prefix")"
}